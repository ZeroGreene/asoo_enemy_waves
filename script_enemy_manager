//absolute beginning of enemy wave manager script

//Script Features:
//Here's a Unity C# script that manages enemy wave spawning using object pooling, supports a time-based fallback, and ends the scene after the last wave is complete.

using UnityEngine;
using System.Collections.Generic;
using UnityEngine.SceneManagement;

public class enemy_wave_manager : MonoBehaviour
{//beg of public class enemy_wave_manager

    [System.Serializable]
    public class Wave
    {
        public int enemyCount;
    }

    public List<Wave> waves;
    public GameObject enemyPrefab;
    public Transform[] spawnPoints;
    public float waveTimeLimit = 20f;

    private Queue<GameObject> enemyPool = new Queue<GameObject>();
    private List<GameObject> activeEnemies = new List<GameObject>();

    private int currentWaveIndex = -1;
    private float waveTimer = 0f;

    public int poolSize = 50;

    private bool gameEnded = false;

    void Start()
    {
        CreateEnemyPool();
        StartNextWave();
    }

    void Update()
    {
        if (gameEnded) return;

        waveTimer += Time.deltaTime;

        CleanDeadEnemies();

        if ((activeEnemies.Count == 0 || waveTimer >= waveTimeLimit))
        {
            if (currentWaveIndex < waves.Count - 1)
            {
                StartNextWave();
            }
            else if (activeEnemies.Count == 0)
            {
                EndGame();
            }
        }
    }

    void CreateEnemyPool()
    {
        for (int i = 0; i < poolSize; i++)
        {
            GameObject enemy = Instantiate(enemyPrefab);
            enemy.SetActive(false);
            enemyPool.Enqueue(enemy);
        }
    }

    GameObject GetEnemyFromPool()
    {
        if (enemyPool.Count > 0)
        {
            GameObject enemy = enemyPool.Dequeue();
            enemy.SetActive(true);
            return enemy;
        }
        else
        {
            // Expand pool if necessary
            GameObject enemy = Instantiate(enemyPrefab);
            return enemy;
        }
    }

    void ReturnEnemyToPool(GameObject enemy)
    {
        enemy.SetActive(false);
        enemyPool.Enqueue(enemy);
    }

    void StartNextWave()
    {
        currentWaveIndex++;
        waveTimer = 0f;

        int enemyCount = waves[currentWaveIndex].enemyCount;

        for (int i = 0; i < enemyCount; i++)
        {
            GameObject enemy = GetEnemyFromPool();

            Transform spawnPoint = spawnPoints[Random.Range(0, spawnPoints.Length)];
            enemy.transform.position = spawnPoint.position;
            enemy.transform.rotation = spawnPoint.rotation;

            // Reset or initialize enemy here if needed
            var enemyComponent = enemy.GetComponent<Enemy>();
            if (enemyComponent != null)
                enemyComponent.OnDeath = () => ReturnEnemyToPool(enemy);

            activeEnemies.Add(enemy);
        }
    }

    void CleanDeadEnemies()
    {
        activeEnemies.RemoveAll(e => e == null || !e.activeInHierarchy);
    }

    void EndGame()
    {
        gameEnded = true;
        Debug.Log("All waves cleared! Ending scene...");
        // Replace with your actual end scene logic
        SceneManager.LoadScene("GameOverScene"); // make sure this scene is added to build settings
    }

}//end of public class enemy_wave_manager

//absolute end of enemy wave manager script
